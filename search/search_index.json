{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio: \"Documentaci\u00f3n de Unidades Did\u00e1cticas de ASGBD\"","text":""},{"location":"#practica-ud1-aws-configurar-en-aws-con-ubuntu-y-mysql-con-apt-install-y-docker-ubuntu","title":"Pr\u00e1ctica UD1 AWS: Configurar en AWS con ubuntu y mysql con apt install y docker ubuntu","text":""},{"location":"#practica-2-instalacion-y-configuracion-avanzada-de-mongodb","title":"Pr\u00e1ctica 2: Instalaci\u00f3n y Configuraci\u00f3n Avanzada de MongoDB","text":"<p>nav:</p>"},{"location":"#description","title":"Description","text":"<ul> <li>Pr\u00e1ctica   1: Documento AWS (ubuntu-mysql-apt-docker)</li> <li>Pr\u00e1ctica 2.1: MongoDB   AWS (apt)</li> <li>Pr\u00e1ctica 2.2: MongoDB   AWS (docker)</li> </ul>"},{"location":"PracUD1AWS/Documento%20detallado/","title":"Detalle","text":""},{"location":"PracUD1AWS/Documento%20detallado/#parte-1-configuramos-en-aws-con-ubuntu-y-mysql-con-apt-install","title":"PARTE 1: Configuramos en AWS con ubuntu y mysql (con apt install)","text":""},{"location":"PracUD1AWS/Documento%20detallado/#configuramos-el-acceso-desde-el-host-por-ssh-primero-al-equipo-ubuntu-y-a-mysql-desde-este","title":"Configuramos el acceso desde el host por ssh primero al equipo ubuntu y a mysql desde \u00e9ste:","text":""},{"location":"PracUD1AWS/Documento%20detallado/#configuramos-contrasena-para-el-usuario-root","title":"Configuramos contrase\u00f1a para el usuario root:","text":"<p><code>sudo su</code></p> <p><code>select user, host, plugin from user;</code></p> <p><code>alter user 'root'@'localhost' identified with caching_sha2_password by 'contrase\u00f1a';</code></p> <p><code>flush privileges;</code></p> <p></p>"},{"location":"PracUD1AWS/Documento%20detallado/#accedemos-al-archivo-de-configuracion-para-permitir-conexiones-remotas-modificando-la-opcion","title":"Accedemos al archivo de configuraci\u00f3n para permitir conexiones remotas modificando la opci\u00f3n:","text":"<p>bind-address: 0.0.0.0</p> <p><code>sudo nano /etc/mysql/mysql.conf.d/mysqld.cnf</code></p> <p></p>"},{"location":"PracUD1AWS/Documento%20detallado/#reiniciamos-mysql","title":"Reiniciamos mysql:","text":"<p><code>sudo systemctl restart mysql.service</code></p> <p>Comprobamos los puertos que tenemos abiertos en el firewall ufw y habilitamos el puerto 3306:</p> <p><code>sudo ufw status</code></p> <p><code>sudo ufw allow 3306</code></p> <p></p> <p>Creamos un usuario para podernos conectar desde cualquier IP y le damos permisos:</p> <p><code>create user 'usuario'@'%' identified by 'contrase\u00f1a';</code></p> <p><code>grant all privileges on *.* to 'usuario'@'%';</code></p> <p><code>flush privileges;</code></p> <p><code>select user, host, from mysql.user;</code></p> <p></p>"},{"location":"PracUD1AWS/Documento%20detallado/#ajustamos-reglas-del-grupo-de-seguridad-en-aws-mysql-en-puerto-3306","title":"Ajustamos reglas del Grupo de Seguridad en AWS (MySQL en puerto 3306):","text":"<p>Que lo tenemos indicado en el resumen inicial de la instancia. Asignar los permisos en el host para el fichero de la clave .pem:</p> <p><code>sudo chmod 400 /ruta del fichero.pem</code></p> <p>Conectamos por ssh a la MV AWS:</p> <p><code>ssh -i /ruta/a/tu-clave.pem ubuntu@&lt;DNS de IPv4 p\u00fablica&gt; (resumen de la instancia)</code></p> <p></p> <p>Utilizamos el usuario que hemos creado para podernos conectar desde cualquier IP:</p> <p></p>"},{"location":"PracUD1AWS/Documento%20detallado/#parte-2-vamos-a-crear-una-instancia-en-aws-ec2","title":"PARTE 2: Vamos a crear una instancia en AWS EC2","text":""},{"location":"PracUD1AWS/Documento%20detallado/#donde-podamos-ejecutar-mysql-server-en-un-contenedor-docker-y-acceder-desde-nuestro-host-local-a-traves-del-puerto-3307","title":"Donde podamos ejecutar MySQL Server en un contenedor Docker y acceder desde nuestro host local a trav\u00e9s del puerto 3307:","text":"<p>Accedemos al grupo de seguridad y editamos las reglas para agregar una y poder abrir el puerto 3306 (mysql) y 3307/tcp para permitir el acceso a \u00e9ste desde nuestro host:</p> <p></p> <p>Conectamos y verificamos que la tenemos actualizada:</p> <p><code>sudo apt update &amp;&amp; sudo apt dist-upgrade -y</code></p> <p>Instalamos Docker</p> <p><code>sudo apt install docker.io</code></p> <p>Nos aseguramoa que docker est\u00e1 en ejecuci\u00f3n</p> <p></p> <p>Reiniciamos</p> <p><code>sudo reboot</code></p> <p>Descargamos la imagen de mysql</p> <p><code>docker versi\u00f3n</code></p> <p><code>sudo docker pull mysql:latest</code></p> <p></p> <p>Una vez tengamos descargada la imagen, iniciaremos el contenedor de MySQL y mapearemos el puerto 3307 de la instancia EC2 al puerto 3306 del contenedor:</p> <p><code>sudo docker run -d --name nombre-del-contenedor -e MYSQL_ROOT_PASSWORD=contrase\u00f1a -p 3307:3306 mysql</code></p> <p></p> <p>Con esto hacemos lo siguiente</p> <pre><code>\u2022 -d: Ejecutamos el contenedor en modo separado .\n\u2022 --name mysql-contenedor : Asigna un nombre al contenedor.\n\u2022 -e MYSQL_ROOT_PASSWORD=mi_contrase\u00f1a: Establecemos la contrase\u00f1a del usuario root de MySQL.\n\u2022 -p 3307:3306: Mapeamos el puerto 3307 de la instancia EC2 al puerto 3306 del contenedor MySQL.\n</code></pre> <p>Verificamos</p> <p><code>sudo docker ps</code></p> <p></p> <p>Nos conectamos desde nuestro host a la instancia de AWS-docker-mysql por medio de la IP publica de \u00e9sta y por el puerto 3307:</p> <p><code>mysql -u root -p -h ip-p\u00fablica -P 3307</code></p> <p><code>select user, host, from mysql.user;</code></p> <p></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/","title":"Pr\u00e1ctica 2.1: MongoDB (apt)","text":""},{"location":"PracUD2MONGO/Documento%20detallado-apt/#instalacion-y-configuracion-avanzada-de-mongodb","title":"Instalaci\u00f3n y Configuraci\u00f3n Avanzada de MongoDB","text":""},{"location":"PracUD2MONGO/Documento%20detallado-apt/#configuramos-la-primera-instancia-con-ubuntu-donde-lo-instalaremos-con-apt-install-mongodb","title":"Configuramos la primera instancia con ubuntu donde lo instalaremos (con apt install) mongoDB","text":"<p>Verificamos la conectividad entre nuestro host y la MV AWS (apt):</p> <p><code>ssh -i /ruta/a/clave .pem ubuntu@&lt;ip-p\u00fablica&gt;</code></p> <p></p> <p>An\u00e1lisis y selecci\u00f3n del SGBD:</p>   Versi\u00f3n m\u00e1s adecuada para mi entorno como estudiante es la MongoDB Community Edition, por las siguientes razones:  - Es totalmente **gratuita y de c\u00f3digo abierto,** lo que la hace ideal para estudiantes y proyectos acad\u00e9micos que no tienen recursos para pagar licencias.  - Es muy **estable y recibe actualizaciones** y parches de seguridad de forma regular. Esto garantiza que los estudiantes utilicen una versi\u00f3n s\u00f3lida y segura, perfecta para aprender sin sacrificar la funcionalidad.  - Funciona en **m\u00faltiples sistemas operativos** (Windows, macOS y Linux), lo cual es \u00fatil para estudiantes que pueden estar trabajando con diferentes plataformas. La Community Edition tambi\u00e9n permite el uso de herramientas gratuitas como MongoDB Compass para la administraci\u00f3n gr\u00e1fica.  - Proporciona las **funcionalidades** clave de MongoDB, como las consultas flexibles de JSON, el soporte para \u00edndices y la capacidad de replicaci\u00f3n. Esto permite a los estudiantes aprender conceptos fundamentales de bases de datos NoSQL, como la esca-labilidad."},{"location":"PracUD2MONGO/Documento%20detallado-apt/#instalacion-de-mongodb-con-apt-en-ubuntu","title":"Instalaci\u00f3n de MongoDB con <code>apt</code> en Ubuntu","text":""},{"location":"PracUD2MONGO/Documento%20detallado-apt/#paso-1-actualizar-los-paquetes-e-importar-la-clave-publica","title":"Paso 1: Actualizar los paquetes e importar la clave p\u00fablica","text":"<p><code>sudo apt update</code></p> <p><code>sudo apt-get install gnupg curl</code></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#paso-2-importar-la-clave-gpg-de-mongodb","title":"Paso 2: Importar la clave GPG de MongoDB","text":"<p><code>curl -fsSL https://www.mongodb.org/static/pgp/server-8.0.asc | \\    sudo gpg -o /usr/share/keyrings/mongodb-server-8.0.gpg \\    --dearmor</code></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#paso-3-creamos-el-archivo-de-lista-para-ubuntu-2404-noble","title":"Paso 3: Creamos el archivo de lista para Ubuntu 24.04 (Noble)","text":"<p><code>echo \"deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-8.0.gpg ] https://repo.mongodb.org/apt/ubuntu noble/mongodb-org/8.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-8.0.list</code></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#paso-4-recargamos-la-bbdd-de-paquetes","title":"Paso 4: Recargamos la BBDD de paquetes","text":"<p><code>sudo apt-get update</code></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#paso-5-instalamos-la-ultima-version-estable","title":"Paso 5: Instalamos la ultima versi\u00f3n estable","text":"<p><code>sudo apt-get install -y mongodb-org</code></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#paso-6-iniciar-el-servicio-de-mongodb","title":"Paso 6: Iniciar el servicio de MongoDB","text":"<p><code>sudo systemctl start mongod</code></p> <p>Si recibe un error similar al siguiente al iniciar <code>mongod</code></p> <p>Failed to start mongod.service: Unit mongod.service not found.</p> <p>Primero ejecute el siguiente comando:</p> <p><code>sudo systemctl daemon-reload</code></p> <p>Luego ejecute nuevamente el comando de inicio anterior.</p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#paso-7-verificar-el-estado-del-servicio","title":"Paso 7: Verificar el estado del servicio","text":"<p><code>sudo systemctl status mongod</code></p> <p>Podemos parar MongoDB:</p> <p><code>sudo systemctl stop mongod</code></p> <p>Para reiniciar MongDB:</p> <p><code>sudo systemctl restart mongod</code></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#paso-8-habilitar-mongodb-para-que-inicie-al-arrancar-el-sistema","title":"Paso 8: Habilitar MongoDB para que inicie al arrancar el sistema","text":"<p><code>sudo systemctl enable mongod</code></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#paso-9-verificar-la-conexion-a-mongodb","title":"Paso 9: Verificar la conexi\u00f3n a MongoDB","text":"<p>Para confirmar que MongoDB est\u00e1 funcionando correctamente, puedes ejecutar el cliente de MongoDB y ver si se conecta poder comenzar a utilizarlo:</p> <p><code>mongosh</code></p> <p></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#configuracion-de-la-conectividad-de-red-en-mongodb-apt-para-permitir-conexiones-remotas","title":"Configuraci\u00f3n de la conectividad de red en MongoDB (apt) para permitir conexiones remotas","text":""},{"location":"PracUD2MONGO/Documento%20detallado-apt/#editamos-el-archivo-de-configuracion-de-mongodb","title":"Editamos el archivo de configuraci\u00f3n de MongoDB","text":"<p><code>sudo nano /etc/mongod.conf</code></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#modificamos-la-opcion-bindip","title":"Modificamos la opci\u00f3n <code>bindIp</code>","text":"<ul> <li>Buscamos la l\u00ednea que contiene <code>bindIp: 127.0.0.1</code> .Esta l\u00ednea configura MongoDB para que solo escuche en la interfaz de localhost.</li> <li>Cambia el valor a <code>0.0.0.0</code> para permitir que MongoDB escuche en todas las interfaces de red:</li> </ul> <pre><code>net:\n  port: 27017\n  bindIp: 0.0.0.0\n</code></pre> <p>Nota: <code>bindIp: 0.0.0.0</code> permite que MongoDB acepte conexiones desde cualquier IP.</p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#reiniciamos-mongodb","title":"Reiniciamos MongoDB","text":"<p><code>sudo systemctl restart mongod</code></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#configurar-el-firewall-opcional","title":"Configurar el Firewall (Opcional)","text":"<p>Si tenemos el firewall habilitado, permitiremos el acceso al puerto <code>27017</code> para conexiones remotas:</p> <p><code>sudo ufw allow 27017</code></p> <p></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#verificar-la-conectividad-remota","title":"Verificar la conectividad remota","text":"<p>Desde otra m\u00e1quina intentaremos conectarnos al servidor de MongoDB usando 'mongosh' con la IP de la m\u00e1quina donde MongoDB est\u00e1 instalado</p> <p><code>mongosh --host &lt;IP del servidor&gt; --port 27017</code></p> <p>Si la conexi\u00f3n es correcta, MongoDB est\u00e1 configurado correctamente para conexiones remotas.</p> <p>En nuestro host</p> <ul> <li>Comprobaremos en nuestro firewall que tenemos el puerto 27017 habilitado</li> <li>Instalaremos mogosdb-mongosh</li> </ul> <p></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#gestion-de-cuentas-de-usuario-y-permisos","title":"Gesti\u00f3n de cuentas de usuario y permisos","text":"<p>Creamos un usuario que tenga permiso para conectarse desde la otra m\u00e1quina</p> <p><code>mongosh</code></p> <p><code>test&gt; use admin</code></p> <pre><code>db.createUser({\n  user: \"admin_user\",\n  pwd: \"securePassword\",\n  roles: [\n    { role: \"root\", db: \"admin\" }\n  ]\n});\n</code></pre> <p></p> <p>Y hay que tener en cuenta de tener de cambiar el valor a <code>0.0.0.0</code> para permitir que MongoDB escuche en todas las interfaces de red:</p> <p></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#conectaremos-desde-otra-maquina-host-con-el-usuario-administrador-de-mongodb-apt","title":"Conectaremos desde otra m\u00e1quina (host) con el usuario administrador de MongoDB (apt)","text":"<p><code>mongosh --host &lt;IP_del_servidor&gt; --port 27017 -u \"admin_user\" -p \"securePassword\" --authenticationDatabase \"admin\"</code></p> <p></p>"},{"location":"PracUD2MONGO/Documento%20detallado-apt/#verificacion-de-la-conectividad-entre-maquinas","title":"Verificaci\u00f3n de la conectividad entre m\u00e1quinas","text":"<ul> <li>Nos conectamos desde la MV-AWS (apt) a la MV-AWS (docker)</li> </ul> <p>1.-Copiamos desde nuestro host el fichero .pem en la MV-AWS (apt) para poder conectarnos posteriormente a la MV-AWS (docker)</p> <p><code>sudo scp -i &lt;/path/to/clave.pem&gt; &lt;/path/to/clave.pem&gt; ubuntu@&lt;IP del servidor&gt;:./</code></p> <p></p> <p>2.-Nos conectamos desde la MV-AWS (apt) a la MV-AWS (docker) con el fichero .pem</p> <p><code>sudo ssh -i &lt;clave.pem&gt; ubuntu@&lt;IP del servidor&gt;</code></p> <p></p> <p>3.-Ejecutamos el contenedor en bash</p> <p><code>sudo docker exec -it &lt;nombre-contenedor&gt; bash</code></p> <p></p> <p>4.-Nos conectamos al usuario de la BBDD de mongoDB</p> <p><code>mongosh -u &lt;user&gt; -p &lt;password&gt;</code></p> <p></p> <ul> <li>Desde el host a la MV-AWS (docker)</li> </ul> <p>1.-Primero nos conectamos por ssh -i a la MV-AWS (docker)</p> <p><code>sudo ssh -i &lt;clave.pem&gt; ubuntu@&lt;ip del servidor&gt;</code></p> <p></p> <p>2.-Ejecutamos el contenedor en bash</p> <p><code>sudo docker exec -it &lt;nombre-contenedor&gt; bash</code></p> <p></p> <p>3.-Nos conectamos al usuario de la BBDD de mongoDB</p> <p><code>mongosh -u &lt;user&gt; -p &lt;password&gt;</code></p> <p></p>"},{"location":"PracUD2MONGO/Documento%20detallado-docker/","title":"Pr\u00e1ctica 2.2: MongoDB (docker)","text":""},{"location":"PracUD2MONGO/Documento%20detallado-docker/#instalacion-y-configuracion-avanzada-de-mongodb","title":"Instalaci\u00f3n y Configuraci\u00f3n Avanzada de MongoDB","text":""},{"location":"PracUD2MONGO/Documento%20detallado-docker/#configuramos-la-primera-instancia-con-ubuntu-donde-lo-instalaremos-usando-docker","title":"Configuramos la primera instancia con ubuntu donde lo instalaremos usando Docker","text":"<p>Verificamos la conectividad entre nuestro host y la MV (mongo-docker):</p> <p><code>ssh -i /ruta/a/clave .pem (ejem:ubuntu)@ip-p\u00fablica</code></p> <p></p>"},{"location":"PracUD2MONGO/Documento%20detallado-docker/#instalacion-de-mongodb-usando-docker","title":"Instalaci\u00f3n de MongoDB usando <code>Docker</code>","text":""},{"location":"PracUD2MONGO/Documento%20detallado-docker/#paso-1-actualizar-los-paquetes","title":"Paso 1: Actualizar los paquetes","text":"<p><code>sudo apt update</code></p>"},{"location":"PracUD2MONGO/Documento%20detallado-docker/#paso-2-instalamos-docker","title":"Paso 2: Instalamos Docker","text":"<p><code>sudo apt install docker.io</code></p>"},{"location":"PracUD2MONGO/Documento%20detallado-docker/#paso-3-descargamos-la-imagen-de-mongodb-desde-docker-hub","title":"Paso 3: Descargamos la imagen de MongoDB desde Docker Hub","text":"<p><code>sudo docker pull mongo</code></p>"},{"location":"PracUD2MONGO/Documento%20detallado-docker/#paso-4-creamos-y-ejecutamos-un-contenedor-con-mongodb","title":"Paso 4: Creamos y ejecutamos un contenedor con MongoDB","text":"<p><code>sudo docker run --name nombre-contenedor -d -p 27017:27017 mongo</code></p> <p>Este comando nos crear\u00e1 un contenedor en segundo plano con el nombre <code>nombre-contenedor</code>, asignado el puerto 27017 del host al contenedor</p>"},{"location":"PracUD2MONGO/Documento%20detallado-docker/#paso-5-verificamos-que-el-contenedor-esta-en-ejecucion","title":"Paso 5: Verificamos que el contenedor est\u00e1 en ejecuci\u00f3n","text":"<p><code>docker ps</code></p> <p></p>"},{"location":"PracUD2MONGO/Documento%20detallado-docker/#paso-6-acceder-al-cliente-de-mongodb-dentro-del-contenedor","title":"Paso 6: Acceder al cliente de MongoDB dentro del contenedor","text":"<p>Podemos abrir una terminal dentro del contenedor y veriricar que MongoDB funciona:</p> <p><code>docker exec -it 'nombre-contenedor' mongosh</code></p> <p></p> <p>Si el cliente de MongoDB se abre y muestra la conexi\u00f3n correcta, significa que MongoDB se nos est\u00e1 ejecutando correctamente en el contenedor.</p>"},{"location":"PracUD2MONGO/Documento%20detallado-docker/#cambio-del-puerto-de-mongodb","title":"Cambio del puerto de MongoDB","text":""},{"location":"PracUD2MONGO/Documento%20detallado-docker/#paso-1-detener-y-eliminar-el-contenedor-de-mongodb-actual-que-ya-esta-ejecutandose","title":"Paso 1: Detener y eliminar el contenedor de MongoDB actual que ya est\u00e1 ejecut\u00e1ndose","text":"<p><code>docker stop 'nombre-contenedor'</code></p> <p><code>docker rm 'nombre-contenedor'</code></p> <p></p>"},{"location":"PracUD2MONGO/Documento%20detallado-docker/#paso-2-crear-un-nuevo-contenedor-con-el-puerto-cambiado","title":"Paso 2: Crear un Nuevo Contenedor con el Puerto Cambiado","text":"<p>Vamos a crear un nuevo contenedor y especificar un puerto diferente al predeterminado (por ejemplo, usaremos el puerto <code>28000</code>).</p> <p><code>docker run -d --name 'nombre-contenedor' -p 28000:27017 mongo</code></p> <p>Aqu\u00ed hemos indicado que el puerto 28000 de la m\u00e1quina anfitriona est\u00e9 asociado al puerto interno 27017 del contenedor, el cual es el puerto que MongoDB usa por defecto dentro del contenedor. MongoDB seguir\u00e1 escuchando en 27017 dentro del contenedor, pero externamente accederemos mediante 28000.</p> <p></p>"},{"location":"PracUD2MONGO/Documento%20detallado-docker/#paso-3-verificamos-la-conexion-con-el-nuevo-puerto","title":"Paso 3: Verificamos la conexi\u00f3n con el nuevo puerto","text":"<p><code>mongosh --port 28000</code></p> <p></p>"},{"location":"PracUD2MONGO/Documento%20detallado-docker/#configuracion-de-la-conectividad-de-red-en-mongodb-docker-para-no-permitir-conexiones-remotas","title":"Configuraci\u00f3n de la conectividad de red en MongoDB (docker) para NO permitir conexiones remotas","text":""},{"location":"PracUD2MONGO/Documento%20detallado-docker/#paso-1-iniciamos-el-contenedor-mongodb-sin-exponer-el-puerto-en-el-host","title":"Paso 1: Iniciamos el contenedor MongoDB sin exponer el puerto en el host","text":"<p>Ejecuta MongoDB en Docker sin especificar el mapeo del puerto (evitando -p 27017:27017):</p> <p><code>docker run -d --name 'nombre-contenedor' mongo</code></p> <p>Esto har\u00e1 que MongoDB est\u00e9 disponible solo dentro del contenedor y no sea accesible desde otras m\u00e1quinas</p> <p>Verificamos el estado del contenedor para confirmar que est\u00e1 en ejeuci\u00f3n, pero sin puertos espuestos</p> <p></p> <p>En la columna <code>PORTS</code>, deberemos ver que no se muestra ning\u00fan puerto para <code>otro-contenedor</code>, indicando que no hay acceso al puerto <code>27017</code> desde el exterior del contenedor</p> <p>Para configurar MongoDB en Docker y no permitir conexiones remotas, debemos ajustar la configuraci\u00f3n de MongoDB para que escuche solo en la interfaz localhost (127.0.0.1). Esto garantiza que MongoDB acepte conexiones \u00fanicamente desde la misma m\u00e1quina anfitriona o desde el propio contenedor.</p>"},{"location":"PracUD2MONGO/Documento%20detallado-docker/#ejecutaremos-mongodb-en-docker-con-la-configuracion-de-localhost","title":"Ejecutaremos MongoDB en Docker con la configuraci\u00f3n de localhost","text":"<p>Con la imagen que tenemos de MongoDB de Docker, crearemos un contenedor que use el archivo de configuraci\u00f3n mongod.conf o directamente especificar la IP de 127.0.0.1.</p> <p>Especificaremos bindIp directamente en el comando de inicio</p> <p><code>docker run -d --name &lt;nombre-contenedor&gt; -p 127.0.0.1:27017 mongo --bind_ip 127.0.0.1</code></p> <p>Usaremos un firewall (ufW) para bloquear el acceso externo</p> <ul> <li> <p>Habilitamos el firewall     <code>sudo ufw enable</code></p> </li> <li> <p>Bloqueamos cualquier acceso externo al puerto 27017     <code>sudo ufw deny 27017</code></p> </li> <li> <p>Confirmamos que las reglas se han aplicado correctamente     <code>sudo ufw status</code></p> </li> </ul> <p></p> <p>Verificamos que MongoDB no sea accesible externamente</p> <p></p> <p>NO PODEMOS ACCEDER</p>"},{"location":"PracUD2MONGO/Documento%20detallado-docker/#gestion-de-cuentas-de-usuario-y-permisos","title":"Gesti\u00f3n de cuentas de usuario y permisos","text":""},{"location":"PracUD2MONGO/Documento%20detallado-docker/#creamos-un-usuario-en-mongodb-docker-que-tenga-permiso-para-conectarse-desde-la-otra-maquina","title":"Creamos un usuario en MongoDB (docker) que tenga permiso para conectarse desde la otra m\u00e1quina","text":"<p><code>docker exec -it &lt;nombre-contenedor mongosh</code></p> <p><code>test&gt; use admin</code></p> <p><code>db.createUser({user: \"admin_user\", pwd: \"securePassword\", roles: [ { role: \"root\", db: \"admin\" } ]});</code></p> <p></p>"},{"location":"PracUD2MONGO/Documento%20detallado-docker/#verificacion-de-la-conectividad-entre-maquinas","title":"Verificaci\u00f3n de la conectividad entre m\u00e1quinas","text":"<ul> <li>Nos conectamos desde la MV-AWS (docker) a la MV-AWS (apt)</li> </ul> <ul> <li>Desde el HOST a la MV-AWS (apt)</li> </ul>"}]}